# macOS-specific Makefile for NSphere
# Defines build settings optimized for macOS platforms, with Homebrew-based dependencies.

# ================================================================
# --- Directory Definitions ---
# ================================================================
ROOT_DIR = .
BIN_DIR = bin
C_SRC_DIR = src/c
PY_SRC_DIR = src/python
# --- End Directory Definitions ---

# Detect last-level cache and pass as -DQUAD_CACHE
# Uses half L3 size, with a minimum of 256 KiB.
# Use sysctl on macOS to get L3 cache size in bytes
HOST_L3_B := $(shell sysctl -n hw.l3cachesize 2>/dev/null || echo 6291456)
ifeq ($(strip $(HOST_L3_B)),)
    HOST_L3_B := 6291456                   # fallback 6 MiB if sysctl fails
endif
# Use python3 to calculate half L3 in bytes, floor at 256KiB (262144)
QUAD_CACHE_BYTES := $(shell python3 -c "import math, sys; sz = int(sys.argv[1]) // 2; print(max(sz, 262144))" $(HOST_L3_B))

# ================================================================
# --- Compiler Configuration ---
# ================================================================
CC = clang

# --- OpenMP Detection ---
# Determine architecture-specific library paths (Apple Silicon vs Intel)
UNAME_MACHINE := $(shell uname -m)
ifeq ($(UNAME_MACHINE),arm64)
    LIBOMP_PREFIX = /opt/homebrew/opt/libomp
else
    LIBOMP_PREFIX = /usr/local/opt/libomp
endif

# Check for omp.h header to determine OpenMP availability
OMP_HEADER_EXISTS := $(shell test -f "$(LIBOMP_PREFIX)/include/omp.h" && echo "yes" || echo "no")

ifeq ($(OMP_HEADER_EXISTS),yes)
    OPENMP_AVAILABLE := yes
    OPENMP_STATUS = OpenMP detected and enabled.
    OPENMP_FLAGS = -Xclang -fopenmp -I$(LIBOMP_PREFIX)/include
    OPENMP_LDFLAGS = -L$(LIBOMP_PREFIX)/lib -lomp
else
    OPENMP_AVAILABLE := no
    OPENMP_FLAGS =
    OPENMP_LDFLAGS =
    OPENMP_STATUS = OpenMP NOT detected. Performance will be limited.
endif
# --- End OpenMP Detection ---

# --- Debug Configuration ---
# Sets debug flags and build type based on DEBUG variable.
DEBUG ?= no
ifeq ($(DEBUG),yes)
    DEBUG_FLAGS = -g -fsanitize=address
    BUILD_TYPE = Debug build
else
    DEBUG_FLAGS =
    BUILD_TYPE = Release build
endif

# ================================================================
# --- Compiler and Linker Flags ---
# ================================================================

# Compiler optimization flags for best performance with generated code
CFLAGS = -Wall -Wextra -Ofast -march=native -ffast-math -funroll-loops -fvectorize -DQUAD_CACHE=$(QUAD_CACHE_BYTES) $(DEBUG_FLAGS) $(OPENMP_FLAGS)

# macOS-specific library paths using Homebrew
HOMEBREW_PREFIX ?= $(shell brew --prefix)
GSL_PREFIX ?= $(HOMEBREW_PREFIX)/opt/gsl
CFLAGS += -I$(GSL_PREFIX)/include -I$(C_SRC_DIR)

# Linker configuration with macOS-specific library paths
LDFLAGS = -L$(GSL_PREFIX)/lib $(OPENMP_LDFLAGS) $(DEBUG_FLAGS)
LDLIBS = -lgsl -lgslcblas -lm -lfftw3 -lfftw3_threads

# --- Python Executable Definitions ---
PY_SCRIPTS = nsphere_plot.py nsphere_animations.py nsphere_distributions.py nsphere_2d_histograms.py
PY_SRCS = $(addprefix $(PY_SRC_DIR)/, $(PY_SCRIPTS))
PY_TARGETS_ROOT = $(patsubst %.py,$(ROOT_DIR)/%, $(notdir $(PY_SCRIPTS)))
PY_TARGETS_BIN = $(patsubst %.py,$(BIN_DIR)/%, $(notdir $(PY_SCRIPTS)))
# --- End Python Definitions ---

# Target configuration
TARGET = nsphere
SRC = $(C_SRC_DIR)/nsphere.c

# ================================================================
# --- Build Rules ---
# ================================================================

# Default target - builds C executable and Python executables
all: $(ROOT_DIR)/$(TARGET) python_executables

# Main target builds the executable - includes check/prompt if OMP failed
$(ROOT_DIR)/$(TARGET): $(SRC) Makefile.MacOS
	@PROCEED_BUILD_DECISION=yes; \
	if [ "$(OPENMP_AVAILABLE)" = "no" ]; then \
		echo "" >&2 ; \
		echo "\033[1;33mWarning: $(OPENMP_STATUS)\033[0m" >&2 ; \
		echo "This will significantly reduce performance." >&2 ; \
		echo "To enable OpenMP on macOS, please install libomp using Homebrew:" >&2 ; \
		echo "  brew install libomp" >&2 ; \
		echo "----------------------------------------------------------" >&2 ; \
		read -p "Continue without OpenMP? [y/N] " answer < /dev/tty > /dev/tty ; \
		echo "----------------------------------------------------------" >&2 ; \
		case "$$answer" in \
			[yY]*) echo "Proceeding without OpenMP..." >&2 ;; \
			*)     echo "Build aborted by user." >&2 ; PROCEED_BUILD_DECISION=no ;; \
		esac ; \
	else \
		echo "\033[1;32m$(OPENMP_STATUS)\033[0m" ; \
	fi; \
	\
	if [ "$$PROCEED_BUILD_DECISION" = "yes" ]; then \
		echo "Building $(TARGET) ($(BUILD_TYPE))..." ; \
		echo "$(CC) $(CFLAGS) $(SRC) -o $@ $(LDFLAGS) $(LDLIBS)" ; \
		$(CC) $(CFLAGS) $(SRC) -o $@ $(LDFLAGS) $(LDLIBS) ; \
		COMPILE_EXIT_STATUS=$$? ; \
		if [ $$COMPILE_EXIT_STATUS -ne 0 ]; then \
			echo "Build FAILED (Exit Status: $$COMPILE_EXIT_STATUS)" >&2; exit $$COMPILE_EXIT_STATUS; \
		fi; \
		echo "Copying executable..." ; \
		mkdir -p $(BIN_DIR) ; \
		cp $@ $(BIN_DIR)/$(TARGET) ; \
		chmod +x $@ $(BIN_DIR)/$(TARGET) ; \
		echo "Build complete: $@ and $(BIN_DIR)/$(TARGET)" ; \
	else \
		echo "Build skipped as user aborted." >&2; exit 1; \
	fi

# ================================================================
# --- Configuration for Single-Threaded Build ---
# ================================================================
# Flag set for explicitly requested non-OpenMP builds
NO_OMP_CFLAGS = -Wall -Wextra -O3 -march=native -ffast-math -funroll-loops -fvectorize $(DEBUG_FLAGS) -I$(GSL_PREFIX)/include -I$(C_SRC_DIR)
NO_OMP_LDFLAGS = -L$(GSL_PREFIX)/lib $(DEBUG_FLAGS)

# ================================================================
# --- Additional Build Targets ---
# ================================================================

# Explicit no-OpenMP target - builds without OpenMP support regardless of availability
no-openmp: python_executables
	@echo ""
	@echo "\033[1;33mWarning: Explicitly building without OpenMP (single-threaded mode)\033[0m"
	@echo "This will significantly reduce performance."
	@echo "----------------------------------------------------------"
	@read -p "Continue without OpenMP? [Y/n] " answer && \
	case "$$answer" in \
		[nN]) echo "Build aborted by user."; exit 1 ;; \
		*) echo "Proceeding without OpenMP..."; ;; \
	esac
	@echo "----------------------------------------------------------"
	@echo "Building $(TARGET) without OpenMP ($(BUILD_TYPE))..."
	@echo "$(CC) $(NO_OMP_CFLAGS) $(SRC) -o $(ROOT_DIR)/$(TARGET) $(NO_OMP_LDFLAGS) $(LDLIBS)"
	@$(CC) $(NO_OMP_CFLAGS) $(SRC) -o $(ROOT_DIR)/$(TARGET) $(NO_OMP_LDFLAGS) $(LDLIBS)
	@mkdir -p $(BIN_DIR)
	cp $(ROOT_DIR)/$(TARGET) $(BIN_DIR)/$(TARGET)
	chmod +x $(ROOT_DIR)/$(TARGET) $(BIN_DIR)/$(TARGET)
	@echo "Build complete (without OpenMP): $(ROOT_DIR)/$(TARGET) and $(BIN_DIR)/$(TARGET)"

# Debug build target - invokes main build with DEBUG=yes
debug:
	@echo "Building in debug mode with AddressSanitizer..."
	@$(MAKE) --no-print-directory DEBUG=yes

# Clean target - removes all generated files
clean:
	@echo "Cleaning up for macOS..."
	rm -f $(ROOT_DIR)/$(TARGET) $(BIN_DIR)/$(TARGET) *.o \
	     $(PY_TARGETS_ROOT) $(PY_TARGETS_BIN) \
	     /tmp/openmp_test_* openmp_test.* 2>/dev/null || true
	-@rmdir $(BIN_DIR) 2>/dev/null || true # Try removing bin dir

# ================================================================
# --- Python Targets and Rules ---
# ================================================================
# Target to create Python executables
.PHONY: python_executables
python_executables: $(PY_TARGETS_ROOT) $(PY_TARGETS_BIN)
	@echo "Python executables are up to date."

# Rule for creating root executable from source
$(ROOT_DIR)/%: $(PY_SRC_DIR)/%.py
	@echo "Copying $< to $@"
	cp $< $@
	chmod +x $@

# Rule for creating bin executable from source
$(BIN_DIR)/%: $(PY_SRC_DIR)/%.py
	@echo "Copying $< to $@"
	@mkdir -p $(BIN_DIR) # Ensure bin exists
	cp $< $@
	chmod +x $@

# Explicit dependencies
$(foreach target,$(PY_TARGETS_ROOT),$(eval $(target): $(PY_SRC_DIR)/$(patsubst $(ROOT_DIR)/%,%.py,$(target))))
$(foreach target,$(PY_TARGETS_BIN),$(eval $(target): $(PY_SRC_DIR)/$(patsubst $(BIN_DIR)/%,%.py,$(target))))
# --- End Python Rules ---

# --- Help and Information ---
# ================================================================
# Displays usage information and current build configuration
help:
	@echo "NSphere Makefile Help - macOS"
	@echo "=================================="
	@echo ""
	@echo "Available targets:"
	@echo "  make                  - Build with OpenMP if available (default)"
	@echo "  make no-openmp        - Build explicitly without OpenMP"
	@echo "  make debug            - Build with debug symbols and AddressSanitizer"
	@echo "  make clean            - Remove build files"
	@echo "  make help             - Display this help message"
	@echo ""
	@echo "Build options (make DEBUG=yes ...):"
	@echo "  DEBUG=yes             - Build with debug symbols and AddressSanitizer"
	@echo ""
	@echo "Current build configuration:"
	@echo "  OpenMP status: $(OPENMP_STATUS)"
	@echo "  Build type: $(BUILD_TYPE)"
	@echo ""
	@echo "Compiler: $(CC)"
	@echo "CFLAGS: $(CFLAGS)"
	@echo ""
	@echo "macOS-specific notes:"
	@echo "  OpenMP requires installing libomp via Homebrew:"
	@echo "    brew install libomp"
	@echo "  GSL/FFTW3 paths assume Homebrew installation. Adjust GSL_PREFIX if needed."
	@echo "  Example: make GSL_PREFIX=/path/to/custom/gsl"
	@echo ""

# Prevent phony targets from interfering with files of the same name
.PHONY: all no-openmp debug clean help python_executables