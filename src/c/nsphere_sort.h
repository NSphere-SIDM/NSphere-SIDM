/*
 * Copyright 2025 Kris Sigurdson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @file nsphere_sort.h
 * @brief Clean wrapper for quadsort to suppress warnings and add support for doubles
 * @details This header provides a clean interface to quadsort by:
 *          1. Containing all warnings through pragma directives
 *          2. Adding support for double and long double types
 *          3. Keeping the original quadsort implementation pristine
 *
 * @note This wrapper is specifically designed for the NSphere simulation system
 *       to ensure consistent sorting behavior across all numerical types.
 */

#ifndef NSPHERE_SORT_H
#define NSPHERE_SORT_H

/**
 * @brief Push current warning state and disable specific warnings
 * @details These pragma directives are used to suppress compiler warnings
 *          that would otherwise be generated by the quadsort implementation.
 *          This allows us to use the original quadsort code without modification.
 */
#ifdef __GNUC__
  #pragma GCC diagnostic push
  /* Suppress warning about using bitwise OR instead of logical OR */
  #pragma GCC diagnostic ignored "-Wbitwise-instead-of-logical"
  /* Suppress warning about unused parameters */
  #pragma GCC diagnostic ignored "-Wunused-parameter"
  /* Suppress warning about macro redefinition (for QUAD_CACHE) */
  #pragma GCC diagnostic ignored "-Wmacro-redefined"
#endif

#ifdef _MSC_VER
  #pragma warning(push)
  /* Suppress warning about unreferenced formal parameters */
  #pragma warning(disable: 4100)
  /* Suppress warning about unsafe use of type 'bool' in operation */
  #pragma warning(disable: 4804)
#endif

/**
 * @brief Include the original quadsort header with warnings suppressed
 * @details The GCC/Clang warning suppression includes "-Wmacro-redefined" to
 *          allow quadsort.h to define QUAD_CACHE even though it may be defined
 *          via compiler flags. This approach preserves dynamic cache sizing
 *          from Makefiles while allowing direct inclusion in other contexts.
 */
#include "quadsort.h"

/* When a platform has not defined QUAD_CACHE through CFLAGS but needs a fallback */
#if !defined(QUAD_CACHE)
    #define QUAD_CACHE 262144  /* Default to 256 KiB for manual compilation */
#endif

/**
 * @brief NSphere extensions to quadsort - Support for double and long double types
 * @details These extensions add specialized sorting implementations for floating-point
 *          types that may not be efficiently handled by the standard quadsort.
 *          They are conditionally compiled based on compiler support.
 */
#ifdef __GNUC__
  /* Keep warnings suppressed for our extensions */
  #include <float.h>

  /**
   * @brief Add support for double precision floating-point sorting
   * @details Creates a specialized quadsort implementation for double type
   *          by including the quadsort.c file with appropriate macro definitions.
   */
  #define VAR double
  #define FUNC(NAME) NAME##128_double
  #include "quadsort.c"
  #undef VAR
  #undef FUNC

  /**
   * @brief Add support for long double precision (if different from double)
   * @details Only creates a specialized implementation if long double has
   *          higher precision than regular double on this platform.
   */
  #if (DBL_MANT_DIG < LDBL_MANT_DIG)
    #define VAR long double
    #define FUNC(NAME) NAME##128_longdouble
    #include "quadsort.c"
    #undef VAR
    #undef FUNC
  #endif
#endif

/**
 * @brief Extended quadsort function with support for double and long double types
 * @details This function extends the standard quadsort implementation to handle
 *          double and long double types with specialized implementations. For other
 *          types, it falls back to the standard quadsort. This provides optimal
 *          performance for all data types used in the NSphere simulation system.
 *
 * Parameters
 * ----------
 * array : void*
 *     Pointer to the array to be sorted.
 * nmemb : size_t
 *     Number of elements in the array.
 * size : size_t
 *     Size of each element in bytes.
 * cmp : CMPFUNC*
 *     Pointer to comparison function that returns negative, zero, or positive
 *     if first argument is less than, equal to, or greater than the second.
 *
 * Returns
 * -------
 * None
 *
 * @note This function automatically selects the appropriate sorting implementation
 *       based on the element size, providing optimized sorting for double and
 *       long double types when supported by the compiler.
 * @warning The implementation for double and long double is only available when
 *          compiled with GCC or compatible compilers.
 * @see quadsort - The original implementation used for standard types.
 */
static inline void ns_quadsort_extended(void *array, size_t nmemb, size_t size, CMPFUNC *cmp)
{
    /* Pass through to original quadsort for standard types */
    quadsort(array, nmemb, size, cmp);
    
    /* Add handling for double if not already supported */
    #ifdef __GNUC__
    if (size == sizeof(double)) {
        quadsort128_double(array, nmemb, cmp);
        return;
    }
    
    /* Add handling for long double if different from double */
    #if (DBL_MANT_DIG < LDBL_MANT_DIG)
    if (size == sizeof(long double)) {
        quadsort128_longdouble(array, nmemb, cmp);
        return;
    }
    #endif
    #endif
}

/**
 * @brief Restore warning settings to their previous state
 * @details Pops the diagnostic pragma stack to restore compiler warning
 *          settings that were modified earlier in this header.
 */
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif

#ifdef _MSC_VER
  #pragma warning(pop)
#endif

/**
 * @brief Define clean aliases to quadsort functions with zero overhead
 * @details These macros provide a consistent naming convention for sorting
 *          functions in the NSphere codebase, making it clear which functions
 *          are part of the NSphere API rather than direct quadsort calls.
 */
#define ns_sort_array     quadsort
#define ns_sort_prim      quadsort_prim
#define ns_sort_size      quadsort_size
#define ns_sort_extended  ns_quadsort_extended

#endif /* NSPHERE_SORT_H */